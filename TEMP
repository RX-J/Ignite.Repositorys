using System;
using System.Runtime.InteropServices;

public class Hotkey
{
    // Windows API Funktionen für Hotkey-Management
    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool UnregisterHotKey(IntPtr hWnd, int id);

    [DllImport("user32.dll")]
    private static extern IntPtr GetMessage(out MSG lpMsg, IntPtr hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

    [DllImport("user32.dll")]
    private static extern bool TranslateMessage(ref MSG lpMsg);

    [DllImport("user32.dll")]
    private static extern IntPtr DispatchMessage(ref MSG lpMsg);

    // Struktur für Nachrichten aus der Windows-API
    [StructLayout(LayoutKind.Sequential)]
    private struct MSG
    {
        public IntPtr hwnd;
        public uint message;
        public IntPtr wParam;
        public IntPtr lParam;
        public uint time;
        public POINT pt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct POINT
    {
        public int x;
        public int y;
    }

    // Modifikator-Keys
    private const uint MOD_ALT = 0x0001;
    private const uint MOD_CONTROL = 0x0002;
    private const uint MOD_SHIFT = 0x0004;
    private const uint MOD_WIN = 0x0008;

    private const int WM_HOTKEY = 0x0312;

    // KeyMode Enum zur Unterscheidung von Key-Ereignissen
    public enum KeyMode
    {
        KeyDown,
        KeyUp,
        KeyPressed
    }

    // Eigenschaften der Hotkey-Klasse
    private IntPtr windowHandle;
    private int id;
    private Action action;
    private KeyMode keyMode;
    private byte[] keys;
    private bool isSubscribed;

    // Konstruktor
    public Hotkey(IntPtr handle, byte[] keys, KeyMode mode, Action action)
    {
        this.windowHandle = handle;
        this.keys = keys;
        this.keyMode = mode;
        this.action = action;
        this.id = GetHashCode(); // Eindeutige ID auf Basis der Hotkey-Instanz

        Subscribe();
    }

    // Registrierung des Hotkeys
    private void Subscribe()
    {
        if (isSubscribed)
        {
            return;
        }

        uint modifiers = 0;
        uint key = 0;

        foreach (byte b in keys)
        {
            switch (b)
            {
                case (byte)ConsoleKey.LeftCtrl:
                case (byte)ConsoleKey.RightCtrl:
                    modifiers |= MOD_CONTROL;
                    break;
                case (byte)ConsoleKey.LeftAlt:
                case (byte)ConsoleKey.RightAlt:
                    modifiers |= MOD_ALT;
                    break;
                case (byte)ConsoleKey.LeftShift:
                case (byte)ConsoleKey.RightShift:
                    modifiers |= MOD_SHIFT;
                    break;
                case (byte)ConsoleKey.LWin:
                case (byte)ConsoleKey.RWin:
                    modifiers |= MOD_WIN;
                    break;
                default:
                    key = b;
                    break;
            }
        }

        // Registrierung des Hotkeys
        if (!RegisterHotKey(windowHandle, id, modifiers, key))
        {
            throw new InvalidOperationException("Fehler beim Registrieren des Hotkeys.");
        }

        isSubscribed = true;
        ListenForHotkey(); // Hotkey-Ereignisse anhören
    }

    // Methode zum Abhören von Hotkey-Ereignissen
    private void ListenForHotkey()
    {
        MSG msg;
        while (isSubscribed)
        {
            GetMessage(out msg, IntPtr.Zero, 0, 0);
            if (msg.message == WM_HOTKEY && msg.wParam.ToInt32() == id)
            {
                HandleHotkeyEvent();
            }
            TranslateMessage(ref msg);
            DispatchMessage(ref msg);
        }
    }

    // Hotkey-Ereignis behandeln
    private void HandleHotkeyEvent()
    {
        switch (keyMode)
        {
            case KeyMode.KeyDown:
            case KeyMode.KeyUp:
            case KeyMode.KeyPressed:
                action?.Invoke(); // Aktion bei Hotkey-Druck ausführen
                break;
        }
    }

    // Hotkey deregistrieren
    public void Unsubscribe()
    {
        if (isSubscribed)
        {
            UnregisterHotKey(windowHandle, id);
            isSubscribed = false;
        }
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Beispiel: Hotkey Ctrl + Alt + A im gesamten System
        var hk = new Hotkey(IntPtr.Zero, new byte[] { (byte)ConsoleKey.LeftCtrl, (byte)ConsoleKey.LeftAlt, (byte)ConsoleKey.A }, Hotkey.KeyMode.KeyPressed, () =>
        {
            Console.WriteLine("Hotkey Ctrl+Alt+A wurde gedrückt!");
        });

        Console.WriteLine("Drücken Sie Strg + Alt + A. Drücken Sie Enter, um das Programm zu beenden.");
        Console.ReadLine();

        // Hotkey deregistrieren
        hk.Unsubscribe();
    }
}







var hk = new Hotkey(IntPtr.Zero, new byte[] { (byte)ConsoleKey.LeftCtrl, (byte)ConsoleKey.LeftAlt, (byte)ConsoleKey.A }, Hotkey.KeyMode.KeyPressed, () =>
{
    Console.WriteLine("Hotkey Ctrl+Alt+A wurde gedrückt!");
});