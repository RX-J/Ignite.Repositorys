using System;
using System.Runtime.InteropServices;

class Program
{
    // Struktur für die Koordinaten der Mausposition
    [StructLayout(LayoutKind.Sequential)]
    public struct POINT
    {
        public int X;
        public int Y;
    }

    // Struktur für Rechtecke (Monitorgrenzen)
    [StructLayout(LayoutKind.Sequential)]
    public struct RECT
    {
        public int left;
        public int top;
        public int right;
        public int bottom;
    }

    // Struktur für Monitorinformationen
    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public class MONITORINFO
    {
        public int cbSize = Marshal.SizeOf(typeof(MONITORINFO));
        public RECT rcMonitor = new RECT();
        public RECT rcWork = new RECT();
        public int dwFlags = 0;
    }

    // Delegat für die Monitorenumfunktion
    public delegate bool MonitorEnumProc(IntPtr hMonitor, IntPtr hdcMonitor, ref RECT lprcMonitor, IntPtr dwData);

    // Import der GetCursorPos-Funktion aus der User32.dll
    [DllImport("user32.dll")]
    public static extern bool GetCursorPos(out POINT lpPoint);

    // Import der MonitorFromPoint-Funktion aus der User32.dll
    [DllImport("user32.dll")]
    public static extern IntPtr MonitorFromPoint(POINT pt, uint dwFlags);

    // Import der GetMonitorInfo-Funktion aus der User32.dll
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool GetMonitorInfo(IntPtr hMonitor, MONITORINFO lpmi);

    // Import der EnumDisplayMonitors-Funktion aus der User32.dll
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    public static extern bool EnumDisplayMonitors(IntPtr hdc, IntPtr lprcClip, MonitorEnumProc lpfnEnum, IntPtr dwData);

    const uint MONITOR_DEFAULTTONEAREST = 0x00000002;

    static void Main(string[] args)
    {
        // Variable zum Speichern der Mausposition
        POINT point;

        // Mausposition abrufen
        if (GetCursorPos(out point))
        {
            Console.WriteLine("Mausposition: X = {0}, Y = {1}", point.X, point.Y);

            // Monitore durchlaufen und herausfinden, auf welchem Monitor die Maus ist
            int monitorIndex = 0;
            bool found = false;

            EnumDisplayMonitors(IntPtr.Zero, IntPtr.Zero, (hMonitor, hdcMonitor, ref RECT lprcMonitor, IntPtr dwData) =>
            {
                monitorIndex++;
                if (point.X >= lprcMonitor.left && point.X <= lprcMonitor.right &&
                    point.Y >= lprcMonitor.top && point.Y <= lprcMonitor.bottom)
                {
                    // Monitorinformationen abrufen
                    MONITORINFO monitorInfo = new MONITORINFO();
                    GetMonitorInfo(hMonitor, monitorInfo);

                    // Berechnung der relativen Mausposition auf dem Monitor
                    int monitorX = point.X - monitorInfo.rcMonitor.left;
                    int monitorY = point.Y - monitorInfo.rcMonitor.top;

                    Console.WriteLine("Maus befindet sich auf Monitor Nr. {0} an Position X = {1}, Y = {2} relativ zum Monitor.",
                                      monitorIndex, monitorX, monitorY);
                    found = true;
                    return false; // Beendet die Aufzählung, da wir den Monitor gefunden haben
                }
                return true; // Weiter mit dem nächsten Monitor
            }, IntPtr.Zero);

            if (!found)
            {
                Console.WriteLine("Kein Monitor gefunden, auf dem sich die Maus befindet.");
            }
        }
        else
        {
            Console.WriteLine("Fehler beim Abrufen der Mausposition.");
        }
    }
}