using System;
using System.Runtime.InteropServices;
using System.Linq;

class Program
{
    // Windows API Methoden zum Registrieren/Deregistrieren von Hotkeys
    [DllImport("user32.dll")]
    private static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

    [DllImport("user32.dll")]
    private static extern bool UnregisterHotKey(IntPtr hWnd, int id);

    [DllImport("user32.dll")]
    private static extern IntPtr GetMessage(out MSG lpMsg, IntPtr hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

    [DllImport("user32.dll")]
    private static extern bool TranslateMessage(ref MSG lpMsg);

    [DllImport("user32.dll")]
    private static extern IntPtr DispatchMessage(ref MSG lpMsg);

    // Strukturdarstellung einer Windows-Nachricht
    [StructLayout(LayoutKind.Sequential)]
    private struct MSG
    {
        public IntPtr hwnd;
        public uint message;
        public IntPtr wParam;
        public IntPtr lParam;
        public uint time;
        public POINT pt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct POINT
    {
        public int x;
        public int y;
    }

    // Konstanten für Modifier-Keys
    private const uint MOD_ALT = 0x0001;
    private const uint MOD_CONTROL = 0x0002;
    private const uint MOD_SHIFT = 0x0004;
    private const uint MOD_WIN = 0x0008;

    private const int WM_HOTKEY = 0x0312;

    static void Main(string[] args)
    {
        // Hotkey-IDs (beliebige eindeutige IDs)
        const int HOTKEY_ID = 1;

        // Beispiel: Byte-Werte für Ctrl + Alt + Shift + A
        byte[] keys = new byte[] { (byte)ConsoleKey.LeftCtrl, (byte)ConsoleKey.LeftAlt, (byte)ConsoleKey.LeftShift, (byte)ConsoleKey.A };

        // Hotkey registrieren basierend auf dem Array
        if (!RegisterHotKeyFromArray(HOTKEY_ID, keys))
        {
            Console.WriteLine("Fehler beim Registrieren des Hotkeys.");
            return;
        }
        Console.WriteLine("Hotkey registriert. Drücken Sie die Kombination.");

        // Nachrichtenloop, um Hotkey-Ereignisse zu verarbeiten
        MSG msg;
        while (true)
        {
            // Auf eine Nachricht warten
            GetMessage(out msg, IntPtr.Zero, 0, 0);

            if (msg.message == WM_HOTKEY)
            {
                // Hotkey wurde gedrückt
                if (msg.wParam.ToInt32() == HOTKEY_ID)
                {
                    Console.WriteLine("Hotkey wurde gedrückt!");
                    PerformAction();
                }
            }

            TranslateMessage(ref msg);
            DispatchMessage(ref msg);
        }

        // Am Ende des Programms den Hotkey deregistrieren
        UnregisterHotKey(IntPtr.Zero, HOTKEY_ID);
    }

    // Methode, um Hotkey basierend auf einem Array von Byte-Werten zu registrieren
    static bool RegisterHotKeyFromArray(int id, byte[] keys)
    {
        uint modifiers = 0;
        uint key = 0;

        foreach (byte b in keys)
        {
            switch (b)
            {
                case (byte)ConsoleKey.LeftCtrl:
                case (byte)ConsoleKey.RightCtrl:
                    modifiers |= MOD_CONTROL;
                    break;
                case (byte)ConsoleKey.LeftAlt:
                case (byte)ConsoleKey.RightAlt:
                    modifiers |= MOD_ALT;
                    break;
                case (byte)ConsoleKey.LeftShift:
                case (byte)ConsoleKey.RightShift:
                    modifiers |= MOD_SHIFT;
                    break;
                case (byte)ConsoleKey.LWin:
                case (byte)ConsoleKey.RWin:
                    modifiers |= MOD_WIN;
                    break;
                default:
                    key = b;
                    break;
            }
        }

        // Hotkey registrieren
        return RegisterHotKey(IntPtr.Zero, id, modifiers, key);
    }

    // Beispielaktion, die bei Hotkey-Druck ausgeführt wird
    static void PerformAction()
    {
        Console.WriteLine("Aktion wurde ausgeführt!");
    }
}